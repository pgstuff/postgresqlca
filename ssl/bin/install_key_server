#! /bin/bash

set -euo pipefail
shopt -s failglob

script_dir="$(dirname "$(readlink -f "$0")")"
base_dir="$(dirname "$script_dir")"
source "$base_dir/var/paths.sh"

server_host_name="$(hostname)"
pg_config_dir=${PGDATA-}
pg_config_path=
pg_reload=0
ssl_config_name=ssl-server.conf

function get_boolean() {
    case "$(echo "$1" | tr '[:upper:]' '[:lower:]')" in
        1|t|true|y|yes)
            echo 1
            return
        ;;
        0|f|false|n|no)
            echo 0
            return
        ;;
    esac
    echo "Value \"$1\" is not a recognized boolean value." >&2
    exit 2
}

parsed_args=$(getopt -o "d:c:r:" -l "datadirectory:,configfile:,reload:" -n "$(basename $0)" -- "$@")
eval set -- "$parsed_args"
while [[ $# -gt 1 ]]; do
    case "$1" in
        -d|--datadirectory)
            pg_config_dir=$2
            shift
        ;;
        -c|--configfile)
            pg_config_path=$2
            shift
        ;;
        -r|--reload)
            pg_reload=$(get_boolean $2)
            shift
        ;;
        *)
            exit 2
        ;;
    esac
    shift
done

if [ -n "$pg_config_dir" ]; then
    if [ -z "$pg_config_path" ]; then
        if [ -e "$pg_config_dir/postgresql.conf" ]; then
            pg_config_path=$pg_config_dir/postgresql.conf
        fi
    fi
fi

ssl_config_path=${pg_config_dir}/${ssl_config_name}

function grep_quote() {
    echo "$1" | sed 's/\\/\\\\/g' | sed 's/\[/\\\[/g' | sed 's/\]/\\\]/g' | sed 's/\^/\\^/g' | sed 's/\$/\\$/g' | sed 's/\*/\\*/g' | sed 's/\./\\./g'
}

function get_last_cert() {
    local server_host_name=$1
    ls -v1 "$ca_server_intermediate_dir/openssl/certs/"*"-${server_host_name}.cert.pem" | grep "/openssl/certs/[0-9]*-$(grep_quote "$server_host_name")\.cert\.pem\$" | tail -n 1
}

key_path=$(get_last_cert "$server_host_name")
serial_num=$(basename "$key_path" "-$server_host_name.cert.pem")

if [ ! -e "$ca_server_intermediate_dir/openssl/certs/${serial_num}-${server_host_name}.cert.pem" ]; then
    echo "Cert \"$ca_server_intermediate_dir/openssl/certs/${serial_num}-${server_host_name}.cert.pem\" does not exist." >&2
    exit 2
fi
if [ ! -e "$ca_server_intermediate_dir/openssl/private/${serial_num}-${server_host_name}.key.pem" ]; then
    echo "Key \"$ca_server_intermediate_dir/openssl/private/${serial_num}-${server_host_name}.key.pem\" does not exist." >&2
    exit 2
fi

cp -p "$ca_server_intermediate_dir/openssl/certs/${serial_num}-${server_host_name}.cert.pem" "$pg_config_dir/server.crt"
cp -p "$ca_server_intermediate_dir/openssl/private/${serial_num}-${server_host_name}.key.pem" "$pg_config_dir/server.key"

cat > "$ssl_config_path" <<EOF
ssl = on
ssl_cert_file = 'server.crt'
ssl_key_file = 'server.key'
EOF
echo "Updated $ssl_config_path"

if ! grep -q "include.*=.*${ssl_config_name}" "$pg_config_path"; then
    echo "include = '$ssl_config_name'" >> "$pg_config_path"
    echo "Updated $pg_config_path"
fi

"$base_dir/bin/server_reload" -r $pg_reload
