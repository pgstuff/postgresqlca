#! /bin/bash

set -eu -o pipefail

script_dir="$(dirname "$(readlink -f "$0")")"
base_dir="$(dirname "$script_dir")"
source "$base_dir/var/paths.sh"

server_host_name="$(hostname)"
pg_config_dir=${PGDATA-}
pg_config_path=
pg_restart=0
ssl_config_name=ssl-server.conf

function get_boolean() {
    case "$(echo "$1" | tr '[:upper:]' '[:lower:]')" in
        1|t|true|y|yes)
            echo 1
            return
        ;;
        0|f|false|n|no)
            echo 0
            return
        ;;
    esac
    echo "Value \"$1\" is not a recognized boolean value." >&2
    exit 2
}

parsed_args=$(getopt -o "d:c:r:" -l "datadirectory:,configfile:,restart:" -n "$(basename $0)" -- "$@")

if [ $? -ne 0 ]; then
    exit 1
fi

eval set -- "$parsed_args"

while [[ $# -gt 1 ]]; do
    case "$1" in
        -d|--datadirectory)
            pg_config_dir=$2
            shift
        ;;
        -c|--configfile)
            pg_config_path=$2
            shift
        ;;
        -r|--restart)
            pg_restart=$(get_boolean $2)
            shift
        ;;
        *)
            exit 2
        ;;
    esac
    shift
done

if [ -n "$pg_config_dir" ]; then
    if [ -z "$pg_config_path" ]; then
        if [ -e "$pg_config_dir/postgresql.conf" ]; then
            pg_config_path=$pg_config_dir/postgresql.conf
        fi
    fi
fi

ssl_config_path=${pg_config_dir}/${ssl_config_name}

if [ ! -e "$ca_server_intermediate_dir/openssl/certs/$server_host_name.cert.pem" ]; then
    echo "Cert \"$ca_server_intermediate_dir/openssl/certs/$server_host_name.cert.pem\" does not exist." >&2
    exit 2
fi

cp -p "$ca_server_intermediate_dir/openssl/certs/$server_host_name.cert.pem" "$pg_config_dir/server.crt"
cp -p "$ca_server_intermediate_dir/openssl/private/$server_host_name.key.pem" "$pg_config_dir/server.key"

cat > "$ssl_config_path" <<EOF
ssl = on
ssl_cert_file = 'server.crt'
ssl_key_file = 'server.key'
EOF
echo "Updated $ssl_config_path"

if ! grep -q "include.*=.*${ssl_config_name}" "$pg_config_path"; then
    echo "include = '$ssl_config_name'" >> "$pg_config_path"
    echo "Updated $pg_config_path"
fi

# For PostgreSQL 10 or above, change this to reload.
if [ $pg_restart -ne 0 ]; then
    echo -n "PostgreSQL "; pg_ctl restart
else
    echo 'You need to run "pg_ctl restart" to make these changes effective.'
fi
