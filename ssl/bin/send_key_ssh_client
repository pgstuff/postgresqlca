#! /bin/bash

set -euo pipefail
shopt -s failglob

script_dir="$(dirname "$(readlink -f "$0")")"
base_dir="$(dirname "$script_dir")"
source "$base_dir/var/paths.sh"

tmp_dir=${tmp_dir-/dev/shm}
pg_config_dir=${PGDATA-}
postgresql_host_name=
ca_id="$(cat "$ca_server_intermediate_dir/var/intermediate_ca_id.var")"
client_ssl_mode="$(cat "$ca_client_intermediate_dir/var/client_default_ssl_mode.var")"
postgresql_port="$(cat "$ca_client_intermediate_dir/var/client_default_port.var")"
database_name="$(cat "$ca_client_intermediate_dir/var/client_default_database_name.var")"
make_key=0
ssh_options=

parsed_args=$(getopt -o "d:i:k:ms:o:" -l "datadirectory:,caid:,keyformat:,makekey,servername:,sshoption:" -n "$(basename $0)" -- "$@")
eval set -- "$parsed_args"
while [[ $# -gt 1 ]]; do
    case "$1" in
        -d|--datadirectory)
            pg_config_dir=$2
            shift
        ;;
        -i|--caid)
            ca_id=$2
            shift
        ;;
        -k|--keyformat)
            key_format=$2
            shift
            case "$key_format" in
                pem)
                ;;
                pkcs-8-der)
                ;;
                *)
                    echo "\"$key_format\" is not a valid value for --keyformat.  Use pem or pkcs-8-der." >&2
                    exit 2
                ;;
            esac
        ;;
        -m|--makekey)
            make_key=1
        ;;
        -s|--servername)
            postgresql_host_name=$2
            shift
        ;;
        -o|--sshoption)
            ssh_options="$ssh_options -o \"$2\""
            shift
        ;;
        --)
            break
        ;;
        *)
            exit 2
        ;;
    esac
    shift
done
shift

key_name=$1
ssh_host_name=$2

if [ -z "$key_name" ]; then
    echo "Specify a user name" >&2
    exit 2
fi

if [ -z "$ssh_host_name" ]; then
    echo "Specify a SSH host name" >&2
    exit 2
fi

if [ ! -e "$PWD" ]; then
    cd /tmp
fi

if [ -z "$ca_id" ]; then
    server_certs="$(ls -1t "$ca_server_intermediate_dir/openssl/certs/"*.cert.pem | grep -v '/ca.cert.pem$' | grep -v '/ca-chain.cert.pem$' | sed 's/\.cert\.pem$//g' | sed 's/.*\///' | cut -d '-' -f 2-)"
    if [ "$(echo "$server_certs" | wc -l)" -ne 1 ]; then
        echo "There is more than 1 server key.  Use --servername to specify 1 of these:" >&2
        echo "$server_certs" | sed 's/^/    /' >&2
        exit 2
    fi
    ca_id=$server_certs
fi

if [ -z "$postgresql_host_name" ]; then
    server_certs="$(ls -1t "$ca_server_intermediate_dir/openssl/certs/"*.cert.pem | grep -v '/ca.cert.pem$' | grep -v '/ca-chain.cert.pem$' | sed 's/\.cert\.pem$//g' | sed 's/.*\///' | cut -d '-' -f 2-)"
    if [ "$(echo "$server_certs" | wc -l)" -ne 1 ]; then
        postgresql_host_name=HOST-NAME
    else
        postgresql_host_name=$server_certs
    fi
fi

pkg_tmp_dir=$(mktemp -d --suffix=_pgkey --tmpdir="$tmp_dir")
client_key_name=${ca_id}-${key_name}
pkg_archive_name="key_pkg-${client_key_name}.tar.bz2"
pkg_install_name="key_pkg-${client_key_name}.sh"
pkg_archive_path="${pkg_tmp_dir}/${pkg_archive_name}"
pkg_install_path="${pkg_tmp_dir}/${pkg_install_name}"
remote_pkg_dir="/tmp"
remote_pkg_archive_path="${remote_pkg_dir}/${pkg_archive_name}"
remote_pkg_install_path="${remote_pkg_dir}/${pkg_install_name}"
if [ $make_key -ne 0 ]; then
    make_key_arg=--makekey
else
    make_key_arg=
fi
"$base_dir/bin/package_key_client" --datadirectory "$pg_config_dir" --encryption "" $make_key_arg --caid "$ca_id" --keyformat "$key_format" "$key_name" "$pkg_archive_path"

function grep_quote() {
    echo "$1" | sed 's/\\/\\\\/g' | sed 's/\[/\\\[/g' | sed 's/\]/\\\]/g' | sed 's/\^/\\^/g' | sed 's/\$/\\$/g' | sed 's/\*/\\*/g' | sed 's/\./\\./g'
}

service_name=${postgresql_host_name}-${database_name}
cat >> "$pkg_install_path" <<EOF
#! /bin/sh
set -eu -o pipefail

echo "Installing key, certificates, and CRL files"
cd "\$HOME"
tar -xjf "${remote_pkg_archive_path}"
rm "${remote_pkg_archive_path}"

if [ ! -e "\$HOME/.pg_service.conf" ]; then
    echo "Creating service file"
    touch "\$HOME/.pg_service.conf"
fi
if ! grep -q "^$(grep_quote "[${postgresql_host_name}-${database_name}]")$" "\$HOME/.pg_service.conf"; then
    if [ -s "\$HOME/.pg_service.conf" ]; then
        echo "Adding service to service file"
        echo >> "\$HOME/.pg_service.conf"
    fi
    cat >> "\$HOME/.pg_service.conf" <<EOT
[${service_name}]
host=$postgresql_host_name
port=$postgresql_port
user=$key_name
dbname=$database_name
sslcert=\$HOME/.postgresql/${client_key_name}.crt
sslkey=\$HOME/.postgresql/${client_key_name}.key
sslrootcert=\$HOME/.postgresql/$ca_id.crt
sslcrl=\$HOME/.postgresql/$ca_id.crl
sslmode=$client_ssl_mode
EOT
else
    echo "Service name exists"
fi

echo "Testing connection"
PGSERVICE="${service_name}" PGAPPNAME="ssl_cert test" psql -wtAc "SELECT 'Connection test successful'"
rm "$remote_pkg_install_path"
EOF
chmod 600 "$pkg_archive_path"
chmod 700 "$pkg_install_path"

eval set -- $ssh_options
scp "$@" "$pkg_archive_path" "$pkg_install_path" "${ssh_host_name}:${remote_pkg_dir}"
rm "$pkg_archive_path" "$pkg_install_path"
rmdir "$pkg_tmp_dir"
ssh "$@" "${ssh_host_name}" "${remote_pkg_install_path}"
