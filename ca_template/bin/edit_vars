#! /bin/bash

set -euo pipefail
shopt -s failglob

script_dir="$(dirname "$(readlink -f "$0")")"
base_dir="$(dirname "$script_dir")"

DIALOG_CANCEL=1
DIALOG_ESC=255

var_path="$base_dir/var"
backtitle="PostgreSQL SSL Certificate Authority"

if [ -e "$var_path/ca_chain.var" ]; then
    ca_chain="$(cat "$var_path/ca_chain.var")"
    case "$ca_chain" in
        root)
            backtitle="$backtitle - Root"
        ;;
        intermediate)
            backtitle="$backtitle - Intermediate"
        ;;
        *)
            echo "The ca_chain (\"$ca_chain\") var is invalid." >&2
            exit 2
        ;;
    esac
fi

if [ -e "$var_path/ca_usage.var" ]; then
    ca_usage="$(cat "$var_path/ca_usage.var")"
    case "$ca_usage" in
        server)
            backtitle="$backtitle - Server"
        ;;
        client)
            backtitle="$backtitle - Client"
        ;;
        *)
            echo "The ca_usage (\"$ca_usage\") var is invalid." >&2
            exit 2
        ;;
    esac
fi

function grep_quote() {
    echo "$1" | sed 's/\\/\\\\/g' | sed 's/\[/\\\[/g' | sed 's/\]/\\\]/g' | sed 's/\^/\\^/g' | sed 's/\$/\\$/g' | sed 's/\*/\\*/g' | sed 's/\./\\./g'
}

function valid_key_len() {
    if [[ ! $1 =~ ^[0-9]+$ ]]; then
        echo "A key length must be a positive whole number."
    elif [ $1 -lt 64 ]; then
        echo "A key length must be no smaller than 64."
    elif [ $1 -gt 8192 ]; then
        echo "A key length must be no larger than 8192."
    fi
}

function valid_cert_days() {
    if [[ ! $1 =~ ^[0-9]+$ ]]; then
        echo "A number of days must be a positive whole number."
    elif [ $1 -lt 1 ]; then
        echo "A number of days must be no smaller than 1."
    elif [ $1 -gt 43830 ]; then
        echo "A number of days must be no larger than 43830."
    fi
}

function valid_ip_port() {
    if [[ ! $1 =~ ^[0-9]+$ ]]; then
        echo "A port number must be a positive whole number."
    elif [ $1 -lt 1 ]; then
        echo "A port number must be no smaller than 1."
    elif [ $1 -gt 65535 ]; then
        echo "A port number must be no larger than 65535"
    fi
}

function get_var_form() {
    local var_name=$1
    local selected_widget_type=$2
    local selected_widget_op=$3
    local widget_type=input
    local order=10
    local label=$1
    local entries=
    local text=
    local flen=35
    local ilen=64
    local itype=0
    local valid_fun=
    local valid_args=

    case $var_name in
        ca_key_cipher)
            label="CA Cipher"
            order=10
            widget_type=radiolist
            entries="aes256=AES 256"
        ;;
        ca_key_len)
            label="CA Key Len"
            order=11
            flen=5
            ilen=4
            valid_fun=valid_key_len
        ;;
        ca_message_digest)
            label="CA Message Digest"
            order=12
            widget_type=radiolist
            entries="sha256=Secure Hash Algorithm 2 - SHA-256:sha384=Secure Hash Algorithm 2 - SHA-384:sha512=Secure Hash Algorithm 2 - SHA-512"
        ;;
        ca_country_code)
            label="CA ISO 3166 Country Code"
            order=20
            flen=3
            ilen=2
        ;;
        ca_state_or_province_name)
            label="CA State or Province Name"
            order=21
        ;;
        ca_locality_name)
            label="CA Locality Name"
            order=22
        ;;
        ca_organization_name)
            label="CA Organization Name"
            order=23
        ;;
        ca_organizational_unit_name)
            label="CA Organizational Unit Name"
            order=24
        ;;
        root_common_name)
            label="Root Common Name"
            order=30
        ;;
        root_cert_days)
            label="Root Cert Validity in Days"
            order=31
            flen=6
            ilen=5
            valid_fun=valid_cert_days
        ;;
        root_crl_days)
            label="Root CRL Validity in Days"
            order=32
            flen=6
            ilen=5
            valid_fun=valid_cert_days
        ;;
        intermediate_common_name)
            label="Intermediate Common Name"
            order=40
        ;;
        intermediate_ca_id)
            label="Intermediate CA ID"
            order=41
        ;;
        intermediate_cert_days)
            label="Intermediate Cert Validity in Days"
            order=42
            flen=6
            ilen=5
            valid_fun=valid_cert_days
        ;;
        intermediate_crl_days)
            label="Intermediate CRL Validity in Days"
            order=43
            flen=6
            ilen=5
            valid_fun=valid_cert_days
        ;;
        server_key_cipher)
            label="Server Key Cipher"
            order=50
            widget_type=radiolist
            entries="=No Cipher:aes256=AES 256"
            text="Select an option for Server Key Cipher.  If you select a cipher, you will be required to enter a pass phrase when you start or restart PostgreSQL."
        ;;
        server_key_len)
            label="Server Key Len"
            order=51
            flen=5
            ilen=4
            valid_fun=valid_key_len
        ;;
        server_message_digest)
            label="Server Message Digest"
            order=52
            widget_type=radiolist
            entries="sha256=Secure Hash Algorithm 2 - SHA-256:sha384=Secure Hash Algorithm 2 - SHA-384:sha512=Secure Hash Algorithm 2 - SHA-512"
        ;;
        server_country_code)
            label="Server ISO 3166 Country Code"
            order=60
            flen=3
            ilen=2
        ;;
        server_state_or_province_name)
            label="Server State or Province Name"
            order=61
        ;;
        server_locality_name)
            label="Server Locality Name"
            order=62
        ;;
        server_organization_name)
            label="Server Organization Name"
            order=63
        ;;
        server_organizational_unit_name)
            label="Server Organizational Unit Name"
            order=64
        ;;
        server_cert_days)
            label="Server Cert Validity in Days"
            order=70
            flen=6
            ilen=5
            valid_fun=valid_cert_days
        ;;
        server_cert_users_group_name)
            label="Server Certificate Users Group Name"
            order=75
        ;;
        client_key_cipher)
            label="Client Key Cipher"
            order=80
            widget_type=radiolist
            entries="=No Cipher:aes256=AES 256"
            text="Select an option for Client Key Cipher.  If you select a cipher, you will be required to enter a pass phrase for the client key when you connect to PostgreSQL."
        ;;
        client_key_len)
            label="Client Key Len"
            order=81
            flen=5
            ilen=4
            valid_fun=valid_key_len
        ;;
        client_message_digest)
            label="Client Message Digest"
            order=82
            widget_type=radiolist
            entries="sha256=Secure Hash Algorithm 2 - SHA-256:sha384=Secure Hash Algorithm 2 - SHA-384:sha512=Secure Hash Algorithm 2 - SHA-512"
        ;;
        client_country_code)
            label="Client ISO 3166 Country Code"
            order=90
            flen=3
            ilen=2
        ;;
        client_state_or_province_name)
            label="Client State or Province Name"
            order=91
        ;;
        client_locality_name)
            label="Client Locality Name"
            order=92
        ;;
        client_organization_name)
            label="Client Organization Name"
            order=93
        ;;
        client_organizational_unit_name)
            label="Client Organizational Unit Name"
            order=94
        ;;
        client_cert_days)
            label="Client Cert Validity in Days"
            order=100
            flen=6
            ilen=5
            valid_fun=valid_cert_days
        ;;
        client_default_ssl_mode)
            label="Default Client SSL Mode"
            order=110
            widget_type=radiolist
            entries="disable=No encryption:allow=No encryption unless the server requires it:prefer=Use encryption if the server supports it:require=Eavesdropping protection in trusted (local) networks only:verify-ca=Full eavesdropping and MITM protection to any trusted server:verify-full=Full eavesdropping and MITM protection to the specified host name"
        ;;
        client_default_port)
            label="Default Port"
            order=111
            flen=6
            ilen=5
            valid_fun=valid_ip_port
        ;;
        client_default_database_name)
            label="Default Database Name"
            order=112
        ;;
        ca_chain)
            widget_type=hidden
        ;;
        ca_usage)
            widget_type=hidden
        ;;
        *)
            widget_type=input
        ;;
    esac

    if [ "$selected_widget_op" == "=" ]; then
        if [ "$selected_widget_type" != "$widget_type" ]; then
            return 0
        fi
    elif [ "$selected_widget_op" == "!=" ]; then
        if [ "$selected_widget_type" = "$widget_type" ]; then
            return 0
        fi
    else
        echo "Unknown selected_widget_op \"$selected_widget_op\"" >&2
        exit 2
    fi

    case $widget_type in
        input)
            if [ $itype -eq 0 ]; then
                if [ ! -w "$var_path/$var_name.var" ]; then
                    itype=2
                fi
            fi
            echo -e "$order\t$var_name\t$label\t$flen\t$ilen\t$itype\t$valid_fun\t$valid_args"
        ;;
        radiolist)
            if [ -z "$text" ]; then
                text="Select an option for ${label}."
            fi
            echo -e "$order\t$var_name\t$label\t$entries\t$text\t$valid_fun\t$valid_args"
        ;;
        hidden)
        ;;
        *)
            echo "Unknown widget_type \"$widget_type\"" >&2
            exit 2
        ;;
    esac
}

function get_form_vars_not_mixedform() {
    for var_name in "$var_path/"*.var; do
        var_name=$(basename $var_name .var)
        local var_form=$(get_var_form "$var_name" input !=)
        if [ -n "$var_form" ]; then
            echo "$var_form"
        fi
    done
}

function get_form_vars_mixedform() {
    for var_name in "$var_path/"*.var; do
        var_name=$(basename $var_name .var)
        local var_form=$(get_var_form "$var_name" input =)
        if [ -n "$var_form" ]; then
            echo "$var_form"
        fi
    done
}

function quote_single_quotes() {
    echo "$1" | sed "s/'/'\"'\"'/"
}

function get_form_vars_mixedform_sorted() {
    local sorted_vars="$1"
    local y=1

    #echo -n $(echo "$sorted_vars" | wc -l)
    echo -n 0
    local fx=$(echo "$sorted_vars" | cut -f 3 | wc -L)
    fx=$((fx + 2))
    echo "$sorted_vars" | while read read_line; do
        local var_name=$(echo "$read_line" | cut -f 2)
        local label=$(echo "$read_line" | cut -f 3)
        local flen=$(echo "$read_line" | cut -f 4)
        local ilen=$(echo "$read_line" | cut -f 5)
        local itype=$(echo "$read_line" | cut -f 6)
        echo -en " '$label' $y 1 '$(quote_single_quotes "$(cat "$var_path/$var_name.var")")' $y $fx $flen $ilen $itype"
        y=$((y + 1))
    done
}

function display_mixedform() {
    local sorted_vars=$(get_form_vars_mixedform | sort -n)
    local form_vars=$(get_form_vars_mixedform_sorted "$sorted_vars")

    set +e
    exec 3>&1
    exec 4>&1
    selection=$(bash <<EOF 2>&1 1>&3
set -u
exec 3>&1
selection=\$(dialog \
        --backtitle "$backtitle" \
        --title "Edit Certificate Information" \
        --keep-tite --input-fd 3 \
        --insecure \
        --ok-label "Save" \
        --cancel-label "Cancel" \
        --mixedform "Edit server certificate information." \
            0 0 $form_vars \
        2>&1 1>&3)
exit_status=\$?
exec 3>&-
if [ \$exit_status -ne 0 ]; then
    exit \$exit_status
fi
echo "\$selection" >&2
EOF
)
    exit_status=$?
    exec 3>&-
    exec 4>&-
    set -e

    if [ $exit_status -eq $DIALOG_CANCEL ]; then
        return 0
    elif [ $exit_status -eq $DIALOG_ESC ]; then
        exit
    elif [ $exit_status -ne 0 ]; then
        exit 2
    fi

    local var_line=1
    echo "$sorted_vars" | while read mixedform; do
        local var_name=$(echo "$mixedform" | cut -f 2)
        local valid_fun=$(echo "$mixedform" | cut -f 7)
        local var_value_old="$(cat "$var_path/$var_name.var")"
        local var_value_new="$(echo "$selection" | sed $var_line'!d')"
        if [ "$var_value_old" != "$var_value_new" ]; then
            if [ -n "$valid_fun" ]; then
                local valid_fun_args=$(echo "$mixedform" | cut -f 8)
                local var_label=$(echo "$mixedform" | cut -f 3)
                while true; do
                    error_msg=$("$valid_fun" "$var_value_new" "$valid_fun_args")
                    if [ -n "$error_msg" ]; then
                        set +e
                        exec 3>&1
                        selection=$(dialog \
                                --backtitle "$backtitle" \
                                --title "Correct Error in $var_label" \
                                --keep-tite --input-fd 3 \
                                --insecure \
                                --ok-label "Save" \
                                --cancel-label "Cancel" \
                                --inputbox "$error_msg" \
                                    0 0 "$var_value_new" \
                                2>&1 1>&3)
                        exit_status=$?
                        exec 3>&-
                        set -e
                        if [ $exit_status -eq $DIALOG_CANCEL ]; then
                            continue
                        elif [ $exit_status -eq $DIALOG_ESC ]; then
                            exit
                        elif [ $exit_status -ne 0 ]; then
                            exit 2
                        fi
                        var_value_new=$selection
                        continue
                    fi
                    break
                done
            fi
            echo "$var_value_new" > "$var_path/$var_name.var"
        fi
        var_line=$((var_line + 1))
    done
}

function get_form_entries_radiolist() {
    local radiolist_var="$1"

    local var_name="$(echo "$radiolist_var" | cut -f 2)"
    local var_entries=$(echo "$radiolist_var" | cut -f 4)
    local var_value_old="$(cat "$var_path/$var_name.var")"

    echo -en 0

    echo "$var_entries" | tr ':' '\n' | while read value_entry; do
        local tag=$(echo "$value_entry" | cut -d '=' -f 1)
        local item=$(echo "$value_entry" | cut -d '=' -f 2)
        local status=off
        if [ "$var_value_old" == "$tag" ]; then
            status=on
        fi
        echo -en " '$tag' '$item' $status"
    done
    if ! grep -q "^$(grep_quote "${var_value_old}")=" <(echo "$var_entries" | tr ':' '\n'); then
        if [ -n "$var_value_old" ]; then
            item="description unavailable"
        else
            item="blank"
        fi
        echo -en " '$var_value_old' '$item' on"
    fi
}

function display_radiolist() {
    local radiolist_var=$1
    local form_entries=$(get_form_entries_radiolist "$radiolist_var")
    local var_label=$(echo "$radiolist_var" | cut -f 3)
    local text=$(echo "$radiolist_var" | cut -f 5)

    while true; do
        set +e
        exec 3>&1
        exec 4>&1
        selection=$(bash <<EOF 2>&1 1>&3
set -u
exec 3>&1
selection=\$(dialog \
        --backtitle "$backtitle" \
        --title "Edit $var_label" \
        --keep-tite --input-fd 3 \
        --ok-label "Save" \
        --cancel-label "Cancel" \
        --radiolist "${text}" \
            0 0 $form_entries \
        2>&1 1>&3)
exit_status=\$?
exec 3>&-
if [ \$exit_status -ne 0 ]; then
    exit \$exit_status
fi
echo "\$selection" >&2
EOF
)
        exit_status=$?
        exec 3>&-
        exec 4>&-
        set -e

        if [ $exit_status -eq $DIALOG_CANCEL ]; then
            return 0
        elif [ $exit_status -eq $DIALOG_ESC ]; then
            exit 1
        elif [ $exit_status -ne 0 ]; then
            exit 2
        fi

        local var_name=$(echo "$radiolist_var" | cut -f 2)
        local valid_fun=$(echo "$radiolist_var" | cut -f 6)
        local var_value_old="$(cat "$var_path/$var_name.var")"
        local var_value_new="$selection"
        if [ "$var_value_old" != "$var_value_new" ]; then
            if [ -n "$valid_fun" ]; then
                local valid_fun_args=$(echo "$radiolist_var" | cut -f 7)
                error_msg=$("$valid_fun" "$var_value_new" "$valid_fun_args")
                if [ -n "$error_msg" ]; then
                    set +e
                    exec 3>&1
                    selection=$(dialog \
                            --backtitle "$backtitle" \
                            --title "Correct Error in $var_label" \
                            --keep-tite --input-fd 3 \
                            --msgbox "$error_msg" \
                                0 0 \
                            2>&1 1>&3)
                    exit_status=$?
                    exec 3>&-
                    set -e
                    if [ $exit_status -eq $DIALOG_CANCEL ]; then
                        continue
                    elif [ $exit_status -eq $DIALOG_ESC ]; then
                        exit
                    elif [ $exit_status -ne 0 ]; then
                        exit 2
                    fi
                    continue
                fi
            fi
            echo "$var_value_new" > "$var_path/$var_name.var"
        fi
        break
    done
}

function display_radiolists() {
    local sorted_vars=$(get_form_vars_not_mixedform | sort -n)

    echo "$sorted_vars" | while read sorted_var; do
        display_radiolist "$sorted_var"
    done
}

display_radiolists || exit 0
display_mixedform
